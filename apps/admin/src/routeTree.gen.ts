/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as PublishIndexImport } from './routes/publish/index'
import { Route as ProblemIndexImport } from './routes/problem/index'
import { Route as ProblemSetIndexImport } from './routes/problem-set/index'
import { Route as ComponentIndexImport } from './routes/component/index'
import { Route as PublishSearchIndexImport } from './routes/publish/search/index'
import { Route as ProblemRegisterIndexImport } from './routes/problem/register/index'
import { Route as ProblemProblemIdIndexImport } from './routes/problem/$problemId/index'
import { Route as ProblemSetRegisterIndexImport } from './routes/problem-set/register/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PublishIndexRoute = PublishIndexImport.update({
  id: '/publish/',
  path: '/publish/',
  getParentRoute: () => rootRoute,
} as any)

const ProblemIndexRoute = ProblemIndexImport.update({
  id: '/problem/',
  path: '/problem/',
  getParentRoute: () => rootRoute,
} as any)

const ProblemSetIndexRoute = ProblemSetIndexImport.update({
  id: '/problem-set/',
  path: '/problem-set/',
  getParentRoute: () => rootRoute,
} as any)

const ComponentIndexRoute = ComponentIndexImport.update({
  id: '/component/',
  path: '/component/',
  getParentRoute: () => rootRoute,
} as any)

const PublishSearchIndexRoute = PublishSearchIndexImport.update({
  id: '/publish/search/',
  path: '/publish/search/',
  getParentRoute: () => rootRoute,
} as any)

const ProblemRegisterIndexRoute = ProblemRegisterIndexImport.update({
  id: '/problem/register/',
  path: '/problem/register/',
  getParentRoute: () => rootRoute,
} as any)

const ProblemProblemIdIndexRoute = ProblemProblemIdIndexImport.update({
  id: '/problem/$problemId/',
  path: '/problem/$problemId/',
  getParentRoute: () => rootRoute,
} as any)

const ProblemSetRegisterIndexRoute = ProblemSetRegisterIndexImport.update({
  id: '/problem-set/register/',
  path: '/problem-set/register/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/component/': {
      id: '/component/'
      path: '/component'
      fullPath: '/component'
      preLoaderRoute: typeof ComponentIndexImport
      parentRoute: typeof rootRoute
    }
    '/problem-set/': {
      id: '/problem-set/'
      path: '/problem-set'
      fullPath: '/problem-set'
      preLoaderRoute: typeof ProblemSetIndexImport
      parentRoute: typeof rootRoute
    }
    '/problem/': {
      id: '/problem/'
      path: '/problem'
      fullPath: '/problem'
      preLoaderRoute: typeof ProblemIndexImport
      parentRoute: typeof rootRoute
    }
    '/publish/': {
      id: '/publish/'
      path: '/publish'
      fullPath: '/publish'
      preLoaderRoute: typeof PublishIndexImport
      parentRoute: typeof rootRoute
    }
    '/problem-set/register/': {
      id: '/problem-set/register/'
      path: '/problem-set/register'
      fullPath: '/problem-set/register'
      preLoaderRoute: typeof ProblemSetRegisterIndexImport
      parentRoute: typeof rootRoute
    }
    '/problem/$problemId/': {
      id: '/problem/$problemId/'
      path: '/problem/$problemId'
      fullPath: '/problem/$problemId'
      preLoaderRoute: typeof ProblemProblemIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/problem/register/': {
      id: '/problem/register/'
      path: '/problem/register'
      fullPath: '/problem/register'
      preLoaderRoute: typeof ProblemRegisterIndexImport
      parentRoute: typeof rootRoute
    }
    '/publish/search/': {
      id: '/publish/search/'
      path: '/publish/search'
      fullPath: '/publish/search'
      preLoaderRoute: typeof PublishSearchIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/component': typeof ComponentIndexRoute
  '/problem-set': typeof ProblemSetIndexRoute
  '/problem': typeof ProblemIndexRoute
  '/publish': typeof PublishIndexRoute
  '/problem-set/register': typeof ProblemSetRegisterIndexRoute
  '/problem/$problemId': typeof ProblemProblemIdIndexRoute
  '/problem/register': typeof ProblemRegisterIndexRoute
  '/publish/search': typeof PublishSearchIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/component': typeof ComponentIndexRoute
  '/problem-set': typeof ProblemSetIndexRoute
  '/problem': typeof ProblemIndexRoute
  '/publish': typeof PublishIndexRoute
  '/problem-set/register': typeof ProblemSetRegisterIndexRoute
  '/problem/$problemId': typeof ProblemProblemIdIndexRoute
  '/problem/register': typeof ProblemRegisterIndexRoute
  '/publish/search': typeof PublishSearchIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/component/': typeof ComponentIndexRoute
  '/problem-set/': typeof ProblemSetIndexRoute
  '/problem/': typeof ProblemIndexRoute
  '/publish/': typeof PublishIndexRoute
  '/problem-set/register/': typeof ProblemSetRegisterIndexRoute
  '/problem/$problemId/': typeof ProblemProblemIdIndexRoute
  '/problem/register/': typeof ProblemRegisterIndexRoute
  '/publish/search/': typeof PublishSearchIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/component'
    | '/problem-set'
    | '/problem'
    | '/publish'
    | '/problem-set/register'
    | '/problem/$problemId'
    | '/problem/register'
    | '/publish/search'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/component'
    | '/problem-set'
    | '/problem'
    | '/publish'
    | '/problem-set/register'
    | '/problem/$problemId'
    | '/problem/register'
    | '/publish/search'
  id:
    | '__root__'
    | '/'
    | '/component/'
    | '/problem-set/'
    | '/problem/'
    | '/publish/'
    | '/problem-set/register/'
    | '/problem/$problemId/'
    | '/problem/register/'
    | '/publish/search/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ComponentIndexRoute: typeof ComponentIndexRoute
  ProblemSetIndexRoute: typeof ProblemSetIndexRoute
  ProblemIndexRoute: typeof ProblemIndexRoute
  PublishIndexRoute: typeof PublishIndexRoute
  ProblemSetRegisterIndexRoute: typeof ProblemSetRegisterIndexRoute
  ProblemProblemIdIndexRoute: typeof ProblemProblemIdIndexRoute
  ProblemRegisterIndexRoute: typeof ProblemRegisterIndexRoute
  PublishSearchIndexRoute: typeof PublishSearchIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ComponentIndexRoute: ComponentIndexRoute,
  ProblemSetIndexRoute: ProblemSetIndexRoute,
  ProblemIndexRoute: ProblemIndexRoute,
  PublishIndexRoute: PublishIndexRoute,
  ProblemSetRegisterIndexRoute: ProblemSetRegisterIndexRoute,
  ProblemProblemIdIndexRoute: ProblemProblemIdIndexRoute,
  ProblemRegisterIndexRoute: ProblemRegisterIndexRoute,
  PublishSearchIndexRoute: PublishSearchIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/component/",
        "/problem-set/",
        "/problem/",
        "/publish/",
        "/problem-set/register/",
        "/problem/$problemId/",
        "/problem/register/",
        "/publish/search/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/component/": {
      "filePath": "component/index.tsx"
    },
    "/problem-set/": {
      "filePath": "problem-set/index.tsx"
    },
    "/problem/": {
      "filePath": "problem/index.tsx"
    },
    "/publish/": {
      "filePath": "publish/index.tsx"
    },
    "/problem-set/register/": {
      "filePath": "problem-set/register/index.tsx"
    },
    "/problem/$problemId/": {
      "filePath": "problem/$problemId/index.tsx"
    },
    "/problem/register/": {
      "filePath": "problem/register/index.tsx"
    },
    "/publish/search/": {
      "filePath": "publish/search/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
